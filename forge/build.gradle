plugins {
	id "com.github.johnrengelman.shadow" version "7.1.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
	dev
}

loom {
	forge {
		mixinConfigs = [
				"ftbultimine-common.mixins.json"
		]
	}
}

artifacts {
	dev(jar)
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

	modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
	modApi("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}") { transitive = false }
	modApi("dev.ftb.mods:ftb-ranks-forge:${rootProject.ftb_ranks_version}") { transitive = false }

//	modCompileOnly("curse.maven:lollipop-347954:3232534")
//	modCompileOnly("curse.maven:lost-trinkets-404038:3242497")

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/extra-local-mods.gradle"

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version,
				"archversion": project.architectury_version,
				"forgeversion": project.forge_version,
				"forgeshortversion": project.forge_version.split("\\.")[0],
				"mcversion": project.minecraft_version,
				"ftblibraryversion": project.ftb_library_version
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	setArchiveClassifier("dev-shadow")
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	setArchiveClassifier("dev") }

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			version ftbPublishing.mavenVersion
			from components.java
		}
	}

	repositories {
		if (ftbPublishing.ftbToken) {
			maven {
				url ftbPublishing.ftbURL
				credentials {
					username = ftbPublishing.ftbUser
					password = ftbPublishing.ftbToken
				}
			}
		}

		if (ftbPublishing.sapsToken) {
			maven {
				url ftbPublishing.sapsURL
				credentials {
					username = ftbPublishing.sapsUser
					password = ftbPublishing.sapsToken
				}
			}
		}
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id_forge
			releaseType = ftbPublishing.relType
			addGameVersion "Forge"
			addGameVersion rootProject.minecraft_version
			mainArtifact(remapJar.archiveFile)
			relations {
				requiredDependency 'architectury-api'
				requiredDependency 'ftb-library-forge'
			}
			changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE_KEY does
			changelogType = 'markdown'
		}
	}
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
